druid.master.datasource.type = com.alibaba.druid.pool.DruidDataSource
druid.master.datasource.driverClassName = com.mysql.jdbc.Driver
druid.master.datasource.url = jdbc:mysql:// rm-bp1e2622v7qrkhwb6rw.mysql.rds.aliyuncs.com:3306/yimi?serverTimezone=GMT%2B8&useSSL=false&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull
druid.master.datasource.username = pre-platform-mis
druid.master.datasource.password = uy7nvqplsabcpwjk


user.url=http://pre-mapi.yimifudao.com/common/mis/userInfo
request.erp.address=http://pre-mapi.yimifudao.com/auth/misuser/

mybatis.jedis.maxIdle=300
mybatis.jedis.maxTotal=600
mybatis.jedis.maxWaitMillis=1000
mybatis.jedis.testOnBorrow=true
mybatis.jedis.hostName=pre-redis-yimi
mybatis.jedis.port=6379
mybatis.jedis.password=fa4uiCaixae4iGie
mybatis.jedis.database=5




# 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
# 默认0
druid.master.datasource.initialSize = 1
# 最小连接池数量
druid.master.datasource.minIdle = 1
# 最大连接池数量
# 默认8
druid.master.datasource.maxActive = 100
# 非公平锁
druid.master.datasource.useUnfairLock = true
# 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降
# 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
druid.master.datasource.maxWait = 60000
# 有两个含义：
# 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
# 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
# 默认1分钟
druid.master.datasource.timeBetweenEvictionRunsMillis = 1000
# 连接保持空闲而不被驱逐的最小时间
druid.master.datasource.minEvictableIdleTimeMillis = 5000
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
# 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
druid.master.datasource.validationQuery = select 1
# 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
druid.master.datasource.validationQueryTimeout = 1
# 建议配置为true，不影响性能，并且保证安全性。
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
# 默认false
druid.master.datasource.testWhileIdle = true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
# 默认true
druid.master.datasource.testOnBorrow = true
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
# 默认false
druid.master.datasource.testOnReturn = true
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
# 默认false
druid.master.datasource.poolPreparedStatements = false
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
# 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
# 默认-1
#druid.master.datasource.maxPoolPreparedStatementPerConnectionSize = 50
# 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
# 监控统计用的filter:stat
# 日志用的filter:log4j
# 防御sql注入的filter:wall
#druid.master.datasource.filters = stat,wall,log4j


log.redis.port=16384
log.redis.host=redis4log
log.redis.database=7
log.redis.password=shei4Yui4ahxohng

druid.slave.datasource.1.type = com.alibaba.druid.pool.DruidDataSource
druid.slave.datasource.1.driverClassName = com.mysql.jdbc.Driver
druid.slave.datasource.1.url = jdbc:mysql:// rm-bp1e2622v7qrkhwb6rw.mysql.rds.aliyuncs.com:3306/yimi?serverTimezone=GMT%2B8&useSSL=false&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull
druid.slave.datasource.1.username = pre-platform-mis
druid.slave.datasource.1.password = uy7nvqplsabcpwjk  

# 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
# 默认0
druid.slave.datasource.1.initialSize = 100
# 最小连接池数量
druid.slave.datasource.1.minIdle = 1
# 最大连接池数量
# 默认8
druid.slave.datasource.1.maxActive = 100
# 非公平锁
druid.slave.datasource.1.useUnfairLock = true
# 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降
# 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
druid.slave.datasource.1.maxWait = 60000
# 有两个含义：
# 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
# 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
# 默认1分钟
druid.slave.datasource.1.timeBetweenEvictionRunsMillis = 1000
# 连接保持空闲而不被驱逐的最小时间
druid.slave.datasource.1.minEvictableIdleTimeMillis = 5000
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
# 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
druid.slave.datasource.1.validationQuery = select 1
# 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
druid.slave.datasource.1.validationQueryTimeout = 1
# 建议配置为true，不影响性能，并且保证安全性。
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
# 默认false
druid.slave.datasource.1.testWhileIdle = true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
# 默认true
druid.slave.datasource.1.testOnBorrow = true
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
# 默认false
druid.slave.datasource.1.testOnReturn = true
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
# 默认false
druid.slave.datasource.1.poolPreparedStatements = false
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
# 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
# 默认-1
#druid.slave.datasource.1.maxPoolPreparedStatementPerConnectionSize = 50
# 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
# 监控统计用的filter:stat
# 日志用的filter:log4j
# 防御sql注入的filter:wall
#druid.slave.datasource.1.filters = stat,wall,log4j


druid.slave.datasource.2.type = com.alibaba.druid.pool.DruidDataSource
druid.slave.datasource.2.driverClassName = com.mysql.jdbc.Driver
druid.slave.datasource.2.url = jdbc:mysql:// rm-bp1e2622v7qrkhwb6rw.mysql.rds.aliyuncs.com:3306/yimi?serverTimezone=GMT%2B8&useSSL=false&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull
druid.slave.datasource.2.username = pre-platform-mis
druid.slave.datasource.2.password = uy7nvqplsabcpwjk  

# 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
# 默认0
druid.slave.datasource.2.initialSize = 1
# 最小连接池数量
druid.slave.datasource.2.minIdle = 1
# 最大连接池数量
# 默认8
druid.slave.datasource.2.maxActive = 100
# 非公平锁
druid.slave.datasource.2.useUnfairLock = true
# 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降
# 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
druid.slave.datasource.2.maxWait = 60000
# 有两个含义：
# 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
# 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
# 默认1分钟
druid.slave.datasource.2.timeBetweenEvictionRunsMillis = 1000
# 连接保持空闲而不被驱逐的最小时间
druid.slave.datasource.2.minEvictableIdleTimeMillis = 5000
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
# 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
druid.slave.datasource.2.validationQuery = select 1
# 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
druid.slave.datasource.2.validationQueryTimeout = 1
# 建议配置为true，不影响性能，并且保证安全性。
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
# 默认false
druid.slave.datasource.2.testWhileIdle = true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
# 默认true
druid.slave.datasource.2.testOnBorrow = true
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
# 默认false
druid.slave.datasource.2.testOnReturn = true
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
# 默认false
druid.slave.datasource.2.poolPreparedStatements = false
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
# 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
# 默认-1
#druid.slave.datasource.2.maxPoolPreparedStatementPerConnectionSize = 50
# 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
# 监控统计用的filter:stat
# 日志用的filter:log4j
# 防御sql注入的filter:wall
#druid.slave.datasource.2.filters = stat,wall,log4j

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
biz.redis.database = 0
# Redis服务器地址
biz.redis.host = 192.168.1.247
# Redis服务器连接端口
biz.redis.port = 6379
# Redis服务器连接密码（默认为空）
biz.redis.password=
# 连接超时时间（毫秒）
biz.redis.timeout = 5000

#数据库种类
jdbc.type = mysql

resouce.bundle.message.sources=yimi/message
validation.message.sources=validatormessage/validation
